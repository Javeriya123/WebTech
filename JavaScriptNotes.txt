JavaScript:
==============================================================

It is a scripting language which is used to create dynamic and interactive webpages.
JavaScript is a case sensetive language.
it is loosely type checked language.

Place where we can write java script:
<script>
	JS code.
</script> 

1) Internal JS.
2) External JS.

Display Statments:

-->document.write();
-->document.writeln();
-->console.log();
-->innerHTML

Example:

<!DOCTYPE html>
<html lang="en">
<head>
    <title>Example1</title>
</head>
<body>
    <script>
        document.write("Hello World")
        document.writeln("Hello JavaScript World")
		console.log("Hello console")
    </script>
</body>
</html>
************
*Keywords: *
************

Set of perdefined words are known as keywords.

**************
* Variables: *
**************

Containers to store some data.

to declear a variable we have 3 ways:

1) var
2) let
3) const

var 
-------
var x; //declearation is possible;
x = 10; //intialization is possible;
var x; //Redeclaration is possible;
x = 20; //Reintialization is possible;

let
-------
let x; //declaration is possible;
x = 10; //intialization is possible;
let x; //Redeclaration is not possible;
x = 20; //Reintialization is possible;

const
-------
const x; //declaration is possible;
x = 10; //intialization is possible;
const x; //Redeclaration is not possible;
x = 20; //Reintialization is not possible;

Local variable and Global variable:
----------------------------------------------------------------

variables declared inside block are known as local Variables.
variables declared outside block are known as Global Variables.

*************
*Datatypes: *
*************
Numbers
String
boolean 
null
undefined

var x = 10;
var x = 10.23;

var x = 'javascript'
var x = "javascript"
var x = "true"

var isTrue = true
var isTrue = false

var a = null;

var b;//undefined

*************
*Operators: *
*************

1)Arithmetic Operators
2)Relational operators
3)Logical Operators
4)Bitwise Operators
5)Assignment Operators
6)Unary Operators
7) typeOf() Operator

********************
*Control Statments *
********************
------------------------------------------------------

Controls Flow of execution.

1) Branching Statments
2) Looping Statments

Branching Statments:
----------------------
if
~~~~
if(condition)
{

}

if else
~~~~~~~~~
if(condition)
{

}
else
{

}

nested if
~~~~~~~~~~~~
if(condition)
{
	if(condition)
	{
	
	}
}
else
{
	if(condition)
	{
	
	}
}
if else ladder
~~~~~~~~~~~~~~~~

if(condition1)
{

}
else if(condition2)
{

}
else if(condition3)
{

}
...
else if(conditionN)
{
	
}
else
{

}

switch
~~~~~~~~

switch (key)
{
	case value1:
		
		break;
	case value2:
		
		break;
	case value3:
		
		break;
	.
	.
	.
	.
	case valueN:
		
		break;
		
	default:
		break;
}

Looping Statments:
--------------------
for loop
~~~~~~~~~~~
for(intialization; condition; inc/dec)
{
	//body of for loop
}

while loop
~~~~~~~~~~~~
while(condition)
{
	//body of while loop
}

do while loop
~~~~~~~~~~~~~~~
do
{
	//body of do while loop
}
while(condition);

for-in loop

*************
*Pop-up's:  *
*************

-->alert():
	to give an alert box. 
	it will have ok button. if ok page will be loaded.
	
-->prompt():
	to take inputs from user.
	it will have ok and cancel button.
	if ok value will be assigned else it will assign null.
	
-->confirm():
	to take confirmation from user.
	it will have ok and cancel button.
	if ok value will be assigned true it will assign false.
	
	
*************
*Function:  *
*************

Set of instructions with dedicated funcationality.
code reuseablity.
modularity.

syntax:
	function functionName(arg1,arg2,....argN)
	{
		//body of function
	}
	
	
************
* Events:  *
************

HTML events are "things" that happen to HTML elements.

When JavaScript is used in HTML pages, JavaScript can "react" on these events.

Offline	     	Triggers when the document goes offline
Onabort	    	Triggers on an abort event
onafterprint	Triggers after the document is printed
onbeforeonload	Triggers before the document loads
onbeforeprint	Triggers before the document is printed
onblur	    	Triggers when the window loses focus
oncanplay		Triggers when media can start play, but might has to stop for buffering
oncanplaythrough	Triggers when media can be played to the end, without stopping for buffering
onchange		Triggers when an element changes
onclick	    	Triggers on a mouse click
oncontextmenu	Triggers when a context menu is triggered
ondblclick		Triggers on a mouse double-click
ondrag	    	Triggers when an element is dragged
ondragend		Triggers at the end of a drag operation
ondragenter 	Triggers when an element has been dragged to a valid drop target
ondragleave		Triggers when an element is being dragged over a valid drop target
ondragover		Triggers at the start of a drag operation
ondragstart		Triggers at the start of a drag operation
ondrop	    	Triggers when dragged element is being dropped
ondurationchange	Triggers when the length of the media is changed
onemptied		Triggers when a media resource element suddenly becomes empty.
onended	  		Triggers when media has reach the end
onerror		    Triggers when an error occur
onfocus	    	Triggers when the window gets focus
onformchange	Triggers when a form changes
onforminput		Triggers when a form gets user input
onhaschange		Triggers when the document has change
oninput			Triggers when an element gets user input
oninvalid		Triggers when an element is invalid
onkeydown		Triggers when a key is pressed
onkeypress		Triggers when a key is pressed and released
onkeyup	     	Triggers when a key is released
onload	    	Triggers when the document loads
onloadeddata	Triggers when media data is loaded
onloadedmetadata	Triggers when the duration and other media data of a media element is loaded
onloadstart	    Triggers when the browser starts to load the media data
onmessage		Triggers when the message is triggered
onmousedown		Triggers when a mouse button is pressed
onmousemove		Triggers when the mouse pointer moves
onmouseout		Triggers when the mouse pointer moves out of an element
onmouseover		Triggers when the mouse pointer moves over an element
onmouseup		Triggers when a mouse button is released
onmousewheel	Triggers when the mouse wheel is being rotated
onoffline		Triggers when the document goes offline
onoine	     	Triggers when the document comes online
ononline		Triggers when the document comes online
onpagehide		Triggers when the window is hidden
onpageshow		Triggers when the window becomes visible
onpause	        Triggers when media data is paused
onplay	    	Triggers when media data is going to start playing
onplaying		Triggers when media data has start playing
onpopstate		Triggers when the window's history changes
onprogress		Triggers when the browser is fetching the media data
onratechange  	Triggers when the media data's playing rate has changed
onreadystatechange		Triggers when the ready-state changes
onredo			Triggers when the document performs a redo
onresize		Triggers when the window is resized
onscroll		Triggers when an element's scrollbar is being scrolled
onseeked		Triggers when a media element's seeking attribute is no longer true, and the seeking has ended
onseeking		Triggers when a media element's seeking attribute is true, and the seeking has begun
onselect		Triggers when an element is selected
onstalled		Triggers when there is an error in fetching media data
onstorage		Triggers when a document loads
onsubmit		Triggers when a form is submitted
onsuspend		Triggers when the browser has been fetching media data, but stopped before the entire media file was fetched
ontimeupdate	Triggers when media changes its playing position
onundo	    	Triggers when a document performs an undo
onunload		Triggers when the user leaves the document
onvolumechange	Triggers when media changes the volume, also when volume is set to "mute"
onwaiting		Triggers when media has stopped playing, but is expected to resume

**********
*String: *
**********

Any thing Declared in quotes is known as String.

Syntax:
	var/let/const str = "content";
	
	var a = "javaScript";
    document.write(a+"<br>")
    document.write(a.length+"<br>")//length of string
    document.write(a[0]+"<br>")

Methods: 
	1)toLowerCase()
		-->converts the String to lower case.
	2)toUpperCase()
		-->converts the String to Upper case.
	3)charAt(position)
		-->Char present at position.
	4)charCodeAt(index)
		-->ASCII value of char at index.
	5)startsWith(arg1,arg2)
		-->arg1 - String you need to Search
		   arg2 - index from where needs to search
		   returns boolean value.
	6)endsWith(arg1,arg2)
		-->arg1 - String you need to Search
		   arg2 - index till where needs to search
		   returns boolean value.
	7)indexOf(arg1,arg2)
		-->arg1 - String you need to find index
		   arg2 - index from where needs to search
		   returns index position value.
	8)lastIndexOf(arg1,arg2)
		-->arg1 - String you need to find index
		   arg2 - index from where needs to search
		   returns index position value.
	9)repeat(count)
		-->repeats count number times.
	10)slice(arg1,arg2)
			--> returns string form arg1 to arg2-1.
	11)substr(arg1,arg2)
		--> returns string from arg1 index to arg2 counts.
	12)subString(arg1,arg2)
		--> returns string from arg1 index to arg2-1 index.
	13)trim()
		--> removes white space at first and last.
		
**********
*Arrays: *
**********
any thing wriiten between square braces is called array.

Syntax:
	var/let/const ArrayName = [element1,element2,element3, ......, elementN];
	
	let a = [12,34.34,'Abcd',true];
	
	document.write(arr,"<br>")
    document.write(arr[4][1],"<br>")
	document.write(arr.length,"<br>")//length of array
	
	methods:
		1)push(arg1,arg2,.....argN)
			--> Elements at last and returns updated array length.
		2)unshift(arg1,arg2,.....argN);
			-->Elements at First and returns updated array length.
		3)pop()
			-->Remove the Elements from last returns removed element.
		4)shift()
			-->Remove the Elements from First returns removed element.
		5)reverse()
			-->reverse an array;
		6)join()
			-->join("*")-->reverse an array star saperated values.
		7)slice(arg1,arg2)
			--> returns array form arg1 to arg2-1.
		8)sort()
			-->sort based an ascii values.
		9)concat(arg1)
			-->concat two arrays.
		10)splice(index,noOfElementsToBeRemoved,newElementsToBeAdded......)
			-->returns removed elements.
		11)indexOf(arg)
			-->return index of arg
			
*************
* Objects:  *
*************

Every thing is an Objects in JavaScript.

Implicit Objects				Explicit Objects
var a = 10;						var a = new Number(10);
var b = "javaScript";			var b = new String("javaScript");
var c = true;					var c = new Boolean(true);
var d = [10,"abd",true];		var d = new Array(10,"abd",true);

Objects are collection related variables and function which are represented
as key-value pair.
we can create an objects usinng 3 Ways:
1) using "new" Operator
2) using literal
3) using constructor function

1) using "new" Operator
------------------------------
var variable_name = new Object();

ex:
var student = new Object();

emp.regNo = 10;
emp.name = "Raju";
emp.marks = 85.88;

2) using literal
------------------------------
var variable_name = {key1:value1,key2:value2,......,keyN:valueN};

ex:
var student = { regNo:10,
				name:"Raju",
				marks:89.63
			};
			
3) using constructor function
------------------------------
function student(regNo,name,marks)
{
	this.regNo = regNo;
	this.name = name;
	this.marks = marks;
}
var student1 = new student(10,"Raju",96.63);

Accessing variable from objects:
=================================
2 ways.

dot operator
------------
document.write(student1.name)
document.write(student1.regNo)
document.write(student1.marks)

using braces
------------
document.write(student1[regNo])
document.write(student1[name])
document.write(student1[marks])

for-in loop
------------
for(var a in student1)
{
	document.writeln(a);
}
gives keys
for of loop
-----------
for(var a of student1)
{
	document.writeln(student1[a]);
}
gives values

****************
* Date Object  *
****************

Date d = new Date();

methods:
---------
getDate():		It returns the integer value between 1 and 31
					that represents the day for the specified date on the basis of local time.
getDay():		It returns the integer value between 0 and 6 
					that represents the day of the week on the basis of local time.
getFullYears():	It returns the integer value that represents the year on the basis of local time.

getHours():		It returns the integer value between 0 and 23 that represents
				the hours on the basis of local time.
getMilliseconds():	It returns the integer value between 0 and 999 that represents
						the milliseconds on the basis of local time.
getMinutes():	It returns the integer value between 0 and 59 that represents 
				the minutes on the basis of local time.
getMonth():		It returns the integer value between 0 and 11 that 
				represents the month on the basis of local time.
getSeconds():	It returns the integer value between 0 and 60 that represents
				the seconds on the basis of local time.
				
****************
* Math Object: *
****************

--> The JavaScript math object provides several constants and methods to perform mathematical operation.

Methods:

abs()		It returns the absolute value of the given number.
acos()		It returns the arccosine of the given number in radians.
asin()		It returns the arcsine of the given number in radians.
atan()		It returns the arc-tangent of the given number in radians.
cbrt()		It returns the cube root of the given number.
ceil()		It returns a smallest integer value, greater than or equal to the given number.
cos()		It returns the cosine of the given number.
cosh()		It returns the hyperbolic cosine of the given number.
exp()		It returns the exponential form of the given number.
floor()		It returns largest integer value, lower than or equal to the given number.
hypot()		It returns square root of sum of the squares of given numbers.
log()		It returns natural logarithm of a number.
max()		It returns maximum value of the given numbers.
min()		It returns minimum value of the given numbers.
pow()		It returns value of base to the power of exponent.
random()	It returns random number between 0 (inclusive) and 1 (exclusive).
round()		It returns closest integer value of the given number.
sign()		It returns the sign of the given number
sin()		It returns the sine of the given number.
sinh()		It returns the hyperbolic sine of the given number.
sqrt()		It returns the square root of the given number
tan()		It returns the tangent of the given number.
tanh()		It returns the hyperbolic tangent of the given number.
trunc()		It returns an integer part of the given number.

*************************
* Document Object Model *
*************************

--> document is the default Object.
DOM is the interface between javaScript and HTML+CSS.

to work with DOM first Select and then Manipulate

to select we will use the methods

	document.getElementById("")
	document.getElementsByClassName("")
	document.getElementsByTagName("")
	document.querySelector("")
	document.querySelectorAll("")
	
on selected objects we will change the things.
we can change
		-->style
			* we can use all css properties
		-->add and remove Classes
			* we can add classes
				classList.add(classname)
				classList.remove(classname)
				classList.toggle(classname)
		-->the content of tag
			* innerHTML
		-->attribute values


validations:

-------------

What Is a Regular Expression?
=============================
A regular expression is a sequence of characters that forms a search
pattern.
Syntax
======
 var reg= /pattern/modifier;

 where "pattern" is the regular expression.
 and the "modifiers" is optionals
 Modifiers
 ==========
 i Perform case-insensitive matching
 g Perform a global match (find all matches rather than stopping
 after the first match)
 m Perform multiline matching

 Brackets are used to find a range of characters:
 ===============================================
 Expression Description
 [a-z] Find any character between the brackets

 [0-9] Find any character between the brackets (any digit)

 (x|y) Find any of the alternatives specified

 Metacharacters are characters with a special meaning:
 =====================================================
 \d Find a digit 0-9
 \w Find a all words and A-z a-z 0-9
 \s Find a whitespace character
 \b Find a match at the beginning or at the end of a word
 ________________________________________________________________________________
 
 Quantifiers define quantities:
 ==============================
 n+ Matches any string that contains at least one n(1 or more)
 n* Matches any string that contains zero or more occurrences of n(0
 or more)
 n? Matches any string that contains zero or one occurrences of n(0
 or 1)
 _________________________________________________________________________________
 
 var regex = /^\d{2}$/;
 The pattern portion above starts with an ^ indicating the beginning
 of a string.
 The \d indicates a digit followed by {2} meaning 2 consecutive digits.
 The $ indicates end of a string.
 So,this pattern will attempt to find
 exactly 2 consecutive digits from the beginning to the end of a
 string.
 _________________________________________________________________________________

 HTML form contains only letters.
 ================================
 var letters = /^[A-Za-z]+$/;
 _________________________________________________________________________________
 
 To get a string contains only numbers (0-9)
 ===========================================
 var dig=/^[0-9]+$/
 which allows only numbers.
 _________________________________________________________________________________
 
 validate a phone number of 10 digits with no comma,
 ======================================================
 var phoneno = /^\d{10}$/
 permit only phone numbers with 10 digits.

 contains letters and numbers only
 =========================================
 var letterNumber = /^[0-9a-zA-Z]+$/
 _________________________________________________________________________________
 whether an input string is a valid emai
 ========================================
 /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,4}$/
 OR
 (/^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$/


 Uppercase (A-Z) and lowercase (a-z) English letters.
 Digits (0-9).
 Characters ! # $ % & ' * + - / = ? ^ _ ` { | } ~
 Character . ( period, dot or fullstop) provided that it is not the
 first or last
 character and it will not come one after the other.
 The domain name [for example com, org, net, in, us, info]
 part contains letters, digits, hyphens, and dots.

 Example of valid email id
 =========================
 mysite@ourearth.com
 my.ownsite@ourearth.org
 mysite@you.me.net

 Example of invalid email id
 ============================

 mysite.ourearth.com [@ is not present]
 mysite@.com.my [ tld (Top Level domain) can not start with dot "." ]
 @you.me.net [ No character before @ ]
 mysite123@gmail.b [ ".b" is not a valid tld ]
 mysite@.org.org [ tld can not start with dot "." ]
 .mysite@mysite.org [ an email should not be start with "." ]
 mysite()*@gmail.com [ here the regular expression only allows
 character, digit,
 underscore, and dash ]
 mysite..1234@yahoo.com [double dots are not allowed]

 Character Description
 ========================
 / .. / All regular expressions start and end with forward slashes.
 __________________________________________________________________________
 
 ^ Matches the beginning of the string or line.
 \w+ Matches one or more word characters including the underscore.
 Equivalent to [A-Za-z0-9_].
 __________________________________________________________________________
 
 [\.-] \ Indicates that the next character is special and not to be
 interpreted literally.
 .- matches character . or -.
 __________________________________________________________________________
 
 ? Matches the previous character 0 or 1 time. Here previous
 character is [.-].
 __________________________________________________________________________

 \w+ Matches 1 or more word characters including the underscore.
 Equivalent to [A-Za-z0-9_].
 __________________________________________________________________________
 
 * Matches the previous character 0 or more times.
 __________________________________________________________________________
 
 ([.-]?\w+)* Matches 0 or more occurrences of [.-]?\w+.
 __________________________________________________________________________
 
 \w+([.-]?\w+)* The sub-expression \w+([.-]?\w+)* is used to match
 the username in the email.
 __________________________________________________________________________ 
 
 It begins with at least one or more word characters including
 the underscore, equivalent to [A-Za-z0-9_]. , followed by . or - and
 . or - must follow by a word character (A-Za-z0-9_).
 @ It matches only @ character.
 __________________________________________________________________________
 
 \w+([.-]?\w+)* It matches the domain name with the same pattern of
 user name described above.
 __________________________________________________________________________
 
 \.\w{2,3} It matches a . followed by two or three word characters,
 e.g., .edu, .org, .com,
 .uk, .us, .co etc.
 __________________________________________________________________________
 
 + The + sign specifies that the above sub-expression shall occur
 one or more times,
 e.g., .com, .co.us, .edu.uk etc.

__________________________________________________________________________

 $ Matches the end of the string or line.
 __________________________________________________________________________
 
 Note: If you want to work on 4 digit domain,
 for example, .info then you must change w{2,3} to w{2,4}.
 __________________________________________________________________________
 
 n{X} Matches any string that contains a sequence of X n's
 n{X,Y} Matches any string that contains a sequence of X to Y n's
 n{X,} Matches any string that contains a sequence of at least X n's
 n$ Matches any string with n at the end of it
 ^n Matches any string with n at the beginning of it
 ?=n Matches any string that is followed by a specific string n
 ?!n Matches any string that is not followed by a specific string n